#!/usr/bin/env python3
# encoding: utf-8

"""
For each endpoint, we can

1. show available connects
2. show status of a connect
3. restart
4. pause
5. delete (kill) a given connect
6. create a connect

TODO:
1. fetch all the configurations, and backup them into curl
# 2. while listing all the connectors, also show their status.
3. restart only one single task
4. request confirmation for dangerous operations
5. show configuration's json diff while posting a new connector
6. sanity check before posting a connector
    - check if the name of the connector is the same as the group id.
# 7. Pause a connector
8. Template to generate the configurations for debezium

"""

import click
import http.client
import json
import os

ENV_CONFIG_FILE = os.path.join(os.environ['HOME'], '.kccli/env.json')
_CM = None


def echo_status_and_body(status, body):
    fg = ''
    if 200 <= status < 300:
        fg = 'green'
    elif 400 <= status < 600:
        fg = 'red'
    else:
        fg = 'yellow'
    click.secho(str(status), fg=fg)
    # check if we can load the json
    try:
        click.echo(json.dumps(json.loads(body), indent=4))
    except Exception:
        click.echo(body)


class KafkaConnectManager(object):

    URL_CONNECTORS = '/connectors'
    URL_CONNECTOR_PLUGINS = '/connector-plugins'

    def __init__(self, endpoint: str):
        self.client = http.client.HTTPConnection(endpoint)

    def _get(self, url):
        self.client.request('GET', url)
        resp = self.client.getresponse()
        return resp.status, resp.read().decode()

    def _post(self, url, body, headers=None):
        if headers is None:
            headers = {}
        self.client.request('POST', url, body, headers)
        resp = self.client.getresponse()
        return resp.status, resp.read().decode()

    def _put(self, url, body="", headers=None):
        if headers is None:
            headers = {}
        self.client.request('PUT', url, body, headers)
        resp = self.client.getresponse()
        return resp.status, resp.read().decode()

    def _post_json(self, url, body):
        headers = {'Content-type': 'application/json'}
        return self._post(url, body, headers)

    def _delete(self, url):
        self.client.request('DELETE', url)
        resp = self.client.getresponse()
        return resp.status, resp.read().decode()

    def delete(self, name: str):
        return self._delete('{}/{}'.format(self.URL_CONNECTORS, name))

    def create(self, body):
        return self._post_json(self.URL_CONNECTORS, body)

    def list_connectors(self):
        status, body = self._get(self.URL_CONNECTORS)
        return status, body

    def get(self, name: str):
        status, body = self._get('{}/{}'.format(self.URL_CONNECTORS, name))
        return status, body

    def get_plugins(self):
        status, plugins = self._get(self.URL_CONNECTOR_PLUGINS)
        return json.loads(plugins)

    def get_status(self, name: str):
        status, body = self._get('{}/{}/status'.format(self.URL_CONNECTORS, name))
        return status, body

    def get_config(self, name: str):
        status, body = self._get('{}/{}/config'.format(self.URL_CONNECTORS, name))
        return status, body

    def restart(self, name: str):
        status, body = self._post('{}/{}/restart'.format(self.URL_CONNECTORS, name), '')
        return status, body

    def restart_task(self, name:str, task_id):
        status, body = self._post('{}/{}/tasks/{}/restart'.format(self.URL_CONNECTORS, name, task_id), '')
        return status, body

    def pause(self, name: str):
        status, body = self._put('{}/{}/pause'.format(self.URL_CONNECTORS, name))
        return status, body

    def resume(self, name: str):
        status, body = self._put('{}/{}/resume'.format(self.URL_CONNECTORS, name))
        return status, body

    def close(self):
        self.client.close()


@click.group()
def cli():
    pass


@cli.group('plugin', help="commands about plugin.")
def plugin():
    pass


@plugin.command('ls', help="list all the available plugins.")
def plugin_show():
    plugins = _CM.get_plugins()
    click.echo(json.dumps(plugins, indent=4))
    # TODO: timeout error


@cli.command('env', help="environment configuration")
@click.option('-s', '--set_current', help="set the environment")
def env(set_current):
    with open(ENV_CONFIG_FILE) as f:
        data = json.load(f)
    if data is None:
        raise Exception('failed to load env config.')
    if set_current is None:
        click.echo(json.dumps(data, indent=4))
        return

    if set_current in data['available']:
        data['current'] = set_current
        with open(ENV_CONFIG_FILE, 'w') as f:
            json.dump(data, f, indent=4)
        click.secho("current env switch to '{}'.".format(set_current), fg='green')
    else:
        click.secho("'{}' not defined.", fg='red')
        click.echo("Available env:")
        click.echo(json.dumps(data, indent=4))


@cli.command('ls', help="list all the connectors.")
def list_connectors():
    status, body = _CM.list_connectors()
    if status is not 200:
        click.echo(status)
        click.echo(body)
        return
    connectors = json.loads(body)
    longest_name_length = 0
    for c in connectors:
        if len(c) > longest_name_length:
            longest_name_length = len(c)

    def format_print(c):
        connector_state = c['connector']['state']
        s = '%-*s | %-7s' % (longest_name_length, c['name'], connector_state)
        not_running_task_exists = False
        fg = 'green'
        s_tasks = ""
        for t in c['tasks']:
            task_state = t['state']
            s_tasks += " | task[{}]:{:>7}".format(t['id'], task_state)
            if task_state != 'RUNNING':
                not_running_task_exists = True
        # TODO: color
        s += s_tasks
        if connector_state != 'RUNNING' or not_running_task_exists:
            if connector_state == 'PAUSED':
                fg = 'yellow'
            else:
                fg = 'red'
        click.secho(s, fg=fg)

    for c in connectors:
        status, body = _CM.get_status(c)
        if status != 200:
            # TODO
            click.echo(status, body)
        else:
            format_print(json.loads(body))


@cli.command('get', help="get the detailed information of a connector.")
@click.argument('name')
def get(name):
    status, body = _CM.get(name)
    echo_status_and_body(status, body)


@cli.command('status', help="show the running status of a connector.")
@click.argument('name')
def get_status(name):
    status, body = _CM.get_status(name)
    echo_status_and_body(status, body)


@cli.command('conf', help="show the configuration of a connector.")
@click.argument('name')
def get_config(name):
    status, body = _CM.get_config(name)
    echo_status_and_body(status, body)


@cli.command('post', help="create a new connector.")
@click.argument('config_file', type=click.File('rb'))
def post_conf(config_file):
    body = config_file.read()
    try:
        data = json.loads(body)
    except json.decoder.JSONDecodeError as err:
        click.secho('json syntax error.', bg='red')
        click.echo(err, err=True)
        return
    status, ret_body = _CM.create(body)
    echo_status_and_body(status, ret_body)


@cli.command('pause', help="pause a connector")
@click.argument('name')
def pause(name):
    status, body = _CM.pause(name)
    echo_status_and_body(status, body)


@cli.command('resume', help="resume a connector")
@click.argument('name')
def resume(name):
    status, body = _CM.resume(name)
    echo_status_and_body(status, body)


@cli.command('rm', help="delete a connector.")
@click.argument('name')
def delete(name):
    status, ret_body = _CM.delete(name)
    echo_status_and_body(status, ret_body)


@cli.command('restart', help="restart a connector.")
@click.argument('name')
@click.option('-t', '--task_id', help="task to restart")
def restart(name, task_id):
    if task_id is None:
        status, ret_body = _CM.restart(name)
    else:
        status, ret_body = _CM.restart_task(name, task_id)
    echo_status_and_body(status, ret_body)


@cli.command('recreate', help="delete a connector and restart it.")
@click.argument('name')
def recreate(name):
    status, config = _CM.get_config(name)
    if status == 404:
        click.echo("connector '{}' not found.".format(name))
        return

    if status is not 200:
        click.echo('failed to get config, status: {}'.format(status))
        return

    status, val = _CM.delete(name)
    if status is not 204:
        click.echo('failed to delete, status: {}'.format(status))
        return

    # TODO: backup the config into a tmp file
    click.echo('deleted.')

    body = {
        'name': name,
        'config': json.loads(config)
    }
    click.echo('re-post with the following config:')
    click.echo(json.dumps(body, indent=4))
    status, val = _CM.create(json.dumps(body))
    if status == 201:
        click.echo('created.')
    else:
        click.echo('failed to create, status: {}'.format(status))
        click.echo(val)


# @cli.command('backup', help='backup a connector config')
# @click.argument('name')
# def fetch(name):
#     # todo


if __name__ == "__main__":
    base_url = None
    with open(ENV_CONFIG_FILE) as f:
        env = json.load(f)  # type: dict
        if 'current' not in env:
            click.echo('no current endpoint defined.')
            exit(1)
        current = env['current']
        base_url = env['available'][current]

    if base_url is not None:
        _CM = KafkaConnectManager(base_url)
        cli()
        _CM.close()
    else:
        click.echo('missing endpoint.')
